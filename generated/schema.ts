// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Vote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("weight", Value.fromBigInt(BigInt.zero()));
    this.set("voterAddress", Value.fromBytes(Bytes.empty()));
    this.set("votedProposal", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Vote entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Vote", id.toString(), this);
    }
  }

  static load(id: string): Vote | null {
    return changetype<Vote | null>(store.get("Vote", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get weight(): BigInt {
    let value = this.get("weight");
    return value!.toBigInt();
  }

  set weight(value: BigInt) {
    this.set("weight", Value.fromBigInt(value));
  }

  get voterAddress(): Bytes {
    let value = this.get("voterAddress");
    return value!.toBytes();
  }

  set voterAddress(value: Bytes) {
    this.set("voterAddress", Value.fromBytes(value));
  }

  get votedProposal(): BigInt {
    let value = this.get("votedProposal");
    return value!.toBigInt();
  }

  set votedProposal(value: BigInt) {
    this.set("votedProposal", Value.fromBigInt(value));
  }
}

export class Delegation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("voterAddress", Value.fromBytes(Bytes.empty()));
    this.set("delegateAddress", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Delegation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Delegation entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Delegation", id.toString(), this);
    }
  }

  static load(id: string): Delegation | null {
    return changetype<Delegation | null>(store.get("Delegation", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get voterAddress(): Bytes {
    let value = this.get("voterAddress");
    return value!.toBytes();
  }

  set voterAddress(value: Bytes) {
    this.set("voterAddress", Value.fromBytes(value));
  }

  get delegateAddress(): Bytes {
    let value = this.get("delegateAddress");
    return value!.toBytes();
  }

  set delegateAddress(value: Bytes) {
    this.set("delegateAddress", Value.fromBytes(value));
  }
}

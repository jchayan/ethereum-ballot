// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Delegated extends ethereum.Event {
  get params(): Delegated__Params {
    return new Delegated__Params(this);
  }
}

export class Delegated__Params {
  _event: Delegated;

  constructor(event: Delegated) {
    this._event = event;
  }

  get voterId(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get delegateId(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Voted extends ethereum.Event {
  get params(): Voted__Params {
    return new Voted__Params(this);
  }
}

export class Voted__Params {
  _event: Voted;

  constructor(event: Voted) {
    this._event = event;
  }

  get voterId(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get weight(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get proposal(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Ballot__proposalsResult {
  value0: Bytes;
  value1: BigInt;

  constructor(value0: Bytes, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Ballot__votersResult {
  value0: BigInt;
  value1: boolean;
  value2: Address;
  value3: BigInt;

  constructor(
    value0: BigInt,
    value1: boolean,
    value2: Address,
    value3: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class Ballot extends ethereum.SmartContract {
  static bind(address: Address): Ballot {
    return new Ballot("Ballot", address);
  }

  chairperson(): Address {
    let result = super.call("chairperson", "chairperson():(address)", []);

    return result[0].toAddress();
  }

  try_chairperson(): ethereum.CallResult<Address> {
    let result = super.tryCall("chairperson", "chairperson():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proposals(param0: BigInt): Ballot__proposalsResult {
    let result = super.call(
      "proposals",
      "proposals(uint256):(bytes32,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Ballot__proposalsResult(
      result[0].toBytes(),
      result[1].toBigInt()
    );
  }

  try_proposals(param0: BigInt): ethereum.CallResult<Ballot__proposalsResult> {
    let result = super.tryCall(
      "proposals",
      "proposals(uint256):(bytes32,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Ballot__proposalsResult(value[0].toBytes(), value[1].toBigInt())
    );
  }

  voters(param0: Address): Ballot__votersResult {
    let result = super.call(
      "voters",
      "voters(address):(uint256,bool,address,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Ballot__votersResult(
      result[0].toBigInt(),
      result[1].toBoolean(),
      result[2].toAddress(),
      result[3].toBigInt()
    );
  }

  try_voters(param0: Address): ethereum.CallResult<Ballot__votersResult> {
    let result = super.tryCall(
      "voters",
      "voters(address):(uint256,bool,address,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Ballot__votersResult(
        value[0].toBigInt(),
        value[1].toBoolean(),
        value[2].toAddress(),
        value[3].toBigInt()
      )
    );
  }

  winnerName(): Bytes {
    let result = super.call("winnerName", "winnerName():(bytes32)", []);

    return result[0].toBytes();
  }

  try_winnerName(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("winnerName", "winnerName():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  winnerVotes(): BigInt {
    let result = super.call("winnerVotes", "winnerVotes():(uint256)", []);

    return result[0].toBigInt();
  }

  try_winnerVotes(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("winnerVotes", "winnerVotes():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  winningProposal(): BigInt {
    let result = super.call(
      "winningProposal",
      "winningProposal():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_winningProposal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "winningProposal",
      "winningProposal():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get proposalNames(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DelegateCall extends ethereum.Call {
  get inputs(): DelegateCall__Inputs {
    return new DelegateCall__Inputs(this);
  }

  get outputs(): DelegateCall__Outputs {
    return new DelegateCall__Outputs(this);
  }
}

export class DelegateCall__Inputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DelegateCall__Outputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }
}

export class GiveRightToVoteCall extends ethereum.Call {
  get inputs(): GiveRightToVoteCall__Inputs {
    return new GiveRightToVoteCall__Inputs(this);
  }

  get outputs(): GiveRightToVoteCall__Outputs {
    return new GiveRightToVoteCall__Outputs(this);
  }
}

export class GiveRightToVoteCall__Inputs {
  _call: GiveRightToVoteCall;

  constructor(call: GiveRightToVoteCall) {
    this._call = call;
  }

  get voter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GiveRightToVoteCall__Outputs {
  _call: GiveRightToVoteCall;

  constructor(call: GiveRightToVoteCall) {
    this._call = call;
  }
}

export class VoteCall extends ethereum.Call {
  get inputs(): VoteCall__Inputs {
    return new VoteCall__Inputs(this);
  }

  get outputs(): VoteCall__Outputs {
    return new VoteCall__Outputs(this);
  }
}

export class VoteCall__Inputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }

  get proposal(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class VoteCall__Outputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }
}
